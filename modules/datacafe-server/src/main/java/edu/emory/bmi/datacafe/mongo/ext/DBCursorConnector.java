/*
* Copyright (c) 2015-2016, Pradeeban Kathiravelu and others. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package edu.emory.bmi.datacafe.mongo.ext;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import edu.emory.bmi.datacafe.constants.MongoConstants;
import edu.emory.bmi.datacafe.mongo.MongoCollection;
import edu.emory.bmi.datacafe.mongo.MongoConnector;
import edu.emory.bmi.datacafe.mongo.MongoUtil;

import java.util.ArrayList;
import java.util.List;

/**
* Connects through the DBCursor methods.
*/
@Deprecated
public class DBCursorConnector extends MongoConnector {

    /**
     * Get a chosen sub set of attributes.
     *
     * @param database            the data base
     * @param collection          the collection in the data base
     * @param ids                 the list of ids.
     * @param preferredAttributes the attributes to be added.
     * @return the list of DBCursor.
     */
    public List<DBCursor> getAttributes(String database, String collection, List ids,
                                        String[] preferredAttributes) {
        return getAttributes(database, collection, ids, MongoConstants.ID_ATTRIBUTE, preferredAttributes);
    }

    /**
     * Get a chosen sub set of attributes
     *
     * @param database            the data base
     * @param collection          the collection in the data base
     * @param ids                 the list of ids.
     * @param idAttribute         The attribute key that is used as the ID.
     * @param preferredAttributes the attributes to be added.
     * @param removedAttributes   the attributes to be removed.
     * @return the list of DBCursor.
     */
    public List<DBCursor> getAttributes(String database, String collection, List ids, String idAttribute,
                                        String[] preferredAttributes, String[] removedAttributes) {
        MongoCollection mongoCollection = new MongoCollection(database, collection);
        DBCollection collection1 = mongoCollection.getCollection();
        List<DBCursor> dbCursors = new ArrayList<>();
        for (Object id : ids) {
            DBCursor results = collection1.find(new BasicDBObject(idAttribute, id),
                    MongoUtil.getDBObjFromAttributes(preferredAttributes, removedAttributes));
            dbCursors.add(results);
            MongoUtil.printCursor(results);
        }
        return dbCursors;
    }

    /**
     * Get a chosen sub set of attributes
     *
     * @param database            the data base
     * @param collection          the collection in the data base
     * @param ids                 the list of ids.
     * @param idAttribute         The attribute key that is used as the ID.
     * @param preferredAttributes the attributes to be added.
     * @return the list of DBCursor.
     */
    public List<DBCursor> getAttributes(String database, String collection, List ids, String idAttribute,
                                        String[] preferredAttributes) {
        return getAttributes(database, collection, ids, idAttribute, preferredAttributes, null);
    }


    /**
     * Gets all the attributes except a certain attribute
     *
     * @param database         the data base
     * @param collection       the collection in the data base
     * @param ids              the list of ids.
     * @param idAttribute      the id Attribute
     * @param removedAttribute the removed attribute
     * @return all the attribute values.
     */
    public List<DBCursor> getAllAttributesExcept(String database, String collection, List ids, String idAttribute,
                                                 String removedAttribute) {

        return getAttributes(database, collection, ids, idAttribute, null, new String[]{removedAttribute});
    }

    /**
     * Gets all the attributes except a certain attribute
     *
     * @param database    the data base
     * @param collection  the collection in the data base
     * @param ids         the list of ids.
     * @param idAttribute the id Attribute
     * @return all the attribute values.
     */
    public List<DBCursor> getAllAttributeValuesExceptMongoAutoGeneratedId(String database, String collection, List ids,
                                                                          String idAttribute) {

        return getAllAttributesExcept(database, collection, ids, idAttribute, MongoConstants.ID_ATTRIBUTE);
    }

}
